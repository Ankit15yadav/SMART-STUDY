// prisma/schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model User {
    id           String   @id @default(uuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    imageUrl     String?
    firstName    String?
    lastName     String?
    emailAddress String   @unique
    maxGroups    Int      @default(0)
    interests    String[]

    groupMembers  GroupMember[]
    sentMessages  Message[] // New relation
    createdGroups Group[]       @relation("GroupCreator")
    MessageRead   MessageRead[]
}

model Group {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String
    imageUrl    String?
    maxMembers  Int
    isPublic    Boolean
    category    String

    evaluationCriteria String?
    privateGroupInfo   String?

    tags String[]

    members  GroupMember[]
    messages Message[] // New relation

    createdBy User      @relation("GroupCreator", fields: [userId], references: [id])
    userId    String
    Meeting   Meeting[]
}

model GroupMember {
    id      String @id @default(uuid())
    role    String
    group   Group  @relation(fields: [groupId], references: [id])
    groupId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String

    @@unique([groupId, userId])
}

// New Message model

model Message {
    id        String        @id @default(uuid())
    content   String
    createdAt DateTime      @default(now())
    groupId   String
    senderId  String
    sender    User          @relation(fields: [senderId], references: [id])
    group     Group         @relation(fields: [groupId], references: [id])
    readBy    MessageRead[]
}

model MessageRead {
    id        String   @id @default(uuid())
    messageId String
    userId    String
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    readAt    DateTime @default(now())

    @@unique([messageId, userId])
}

model Meeting {
    id          String   @id @default(uuid())
    groupId     String
    meetingLink String
    startTime   DateTime
    endTime     DateTime
    createdAt   DateTime @default(now())
    group       Group    @relation(fields: [groupId], references: [id])
}
